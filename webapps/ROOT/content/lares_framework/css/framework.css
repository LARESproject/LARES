@namespace oxy url('http://www.oxygenxml.com/extensions/author');
@namespace xml url('http://www.w3.org/XML/1998/namespace');
@namespace xi url('http://www.w3.org/2001/XInclude');
@namespace url('http://www.tei-c.org/ns/1.0');

/* This framework derives partly from the Oxygen Author form created by the US Epigraphy Project: 
 https://github.com/Brown-University-Library/usep-data/tree/master/oxygen-author */

       oxy|comment {
        display:none !important;
        content: "";
       }

          oxy|doctype, respStmt, handNote, scriptDesc, profileDesc, authority, provenance, msItem, teiHeader listPlace, teiHeader listPerson, editionStmt, history, publicationStmt date, publisher, availability, msIdentifier, textLang, personGrp {
           display:none;
           visibility: -oxy-collapse-text ;
       }
       
        xi|include, include {
        display:inline !important;
        }
        
        /*Authority Lists*/
        body listPlace place, body listPerson person, body listOrg org {
        display:block;
        margin-bottom: 3em;
        background-color:#E8E8E8;
        border:5px solid rgb(153, 153, 143);
        }
        
        link:after {
        content: oxy_checkbox(edit, "@cert", values, "low", uncheckedValues, "", labels, "Alleged")
        oxy_editor(type, button, actionID, "delete_link");
        display:inline;
    }
    
    body listPlace[type="places"] listPlace:before, body listPlace[type="estates"] listPlace:before, body listOrg listOrg:before, body listPerson listPerson:before {
    content: "List by "
    oxy_editor(type, popupSelection, editable, false, edit, "@n");
       display:block;
       padding-left:10px;
       border:2px solid rgb(153, 153, 143);
       background-color:orange;
       font-weight:bold;
    }
    
    body listPlace[type="places"] listPlace:after {
        content: 
        oxy_editor(type, button, actionID, "add_place")
        "to list by "
        oxy_editor(type, popupSelection, editable, false, edit, "@n");
           display:block;
           margin-bottom: 200px;
    }
    
    body listPlace[type="estates"] listPlace:after {
        content: 
        oxy_editor(type, button, actionID, "add_estate")
        "to list by "
        oxy_editor(type, popupSelection, editable, false, edit, "@n");
           display:block;
           margin-bottom: 200px;
    }
    
    body listOrg listOrg:after {
        content: 
        oxy_editor(type, button, actionID, "add_juridical_person")
        "to list by "
        oxy_editor(type, popupSelection, editable, false, edit, "@n");
           display:block;
           margin-bottom: 200px;
    }
    body listPerson listPerson:after {
        content: 
        oxy_editor(type, button, actionID, "add_person")
        "to list by "
        oxy_editor(type, popupSelection, editable, false, edit, "@n");
        display:block;
        margin-bottom: 200px;
    }
        
          body listPlace place geo {
          visibility: -oxy-collapse-text ;
    }
    
     body listPlace place:before, body listOrg org:before, body listPerson person:before {
         font-weight:bold;
        content: "Item name";
        display:block;
        visibility: -oxy-collapse-text ;
           padding-left:20px;
          }
          
    body listPlace place placeName, body listPlace place geogName:not([type="coord"]), body listOrg org orgName, body listPerson person persName {
        border:2px solid rgb(153, 153, 143);
        background-color: #fdfdfd;
        margin:10px 20px 15px 20px;
        display:block;
        -oxy-placeholder-content: 'Standardized name';     
    }
    
    body listPlace place placeName[type="other"], body listPlace place geogName[type="other"], body listOrg org orgName[type="other"], body listPerson person persName[type="other"] {
        border:2px solid rgb(153, 153, 143);
        background-color: #fdfdfd;
        margin:10px 20px 15px 20px;
        display:block;
        -oxy-placeholder-content: 'Also known as';
    }    
    
    body listPlace place geo:after {
        content: "Coordinates (Lat, Long): "
        oxy_htmlContent(content, "<span style='font:11px'>[<a href='../resources/map.html'>Open map</a>]</span>") 
        /*https://www.gps-coordinates.net/*/      /*oxy_browser( href, '../resources/map.html', width, 100%, height, 400px)*/
        oxy_editor(type, text, edit, "#text" columns, 40)
        oxy_checkbox(edit, "@style", values, "line", uncheckedValues, "", labels, "Line");
        display:block;
        padding-left:20px;
        padding-right:20px;
    }
    
    body listPlace place idno:before, body listOrg org idno:before, body listPerson person idno:before {
        content: "Item number: "
        oxy_editor(type, text, edit, "#text" columns, 30);
        display:block;
        padding-left:20px;
    }    

         body listPlace place note, body listOrg org note, body listPerson person note {
        border:2px solid rgb(153, 153, 143);
        background-color: #fdfdfd;
        margin:10px 20px 15px 20px;
        display:block;
        -oxy-placeholder-content: 'Commentary/Bibliography';
    }
    
    /* Links from people, places, juridical persons, estates to PLACES*/
    body listPerson person link[type="places"], body listPlace[type="estates"] place link[type="places"] {
        content: "Linked to (place): "
         oxy_editor(type, text, edit, "@corresp", columns, 19)
           /*oxy_editor(type, popupSelection, edit, "@corresp", editable, false, sort, ascending,
             values, oxy_concat("#", oxy_xpath(oxy_concat('string-join(doc("', oxy_url('${framework}/', 'resources/places.xml'), '")//listPlace//place/idno, ",#")'))),
             labels, oxy_xpath(oxy_concat('normalize-space(string-join(doc("', oxy_url('${framework}/', 'resources/places.xml'), '")//listPlace//place/placeName[1], ","))' ))
             )*/
             " Link type: "
             oxy_editor(type, combo, edit, "@subtype", editable, true, columns, 16,
             values, "isPartOf, isMadeOf, isWithin, hasWithin, isInVicinityOf, hasInItsVicinity, isAdjacentTo, hasConnectionWith");
           display:block;
           padding-left:20px;
    }
    
    body listPlace[type="places"] place link[type="places"] {
        content: "Linked to (place): "
         oxy_editor(type, text, edit, "@corresp", columns, 19)
           /*oxy_editor(type, popupSelection, edit, "@corresp", editable, false, sort, ascending,
             values, oxy_concat("#", oxy_xpath(oxy_concat('string-join(//place/idno, ",#")'))),
             labels, oxy_xpath(oxy_concat('normalize-space(string-join(//place/placeName[1], ","))' ))
             )*/
             " Link type: "
             oxy_editor(type, combo, edit, "@subtype", editable, true, columns, 16,
             values, "isPartOf, isMadeOf, isWithin, hasWithin, isInVicinityOf, hasInItsVicinity, isAdjacentTo, hasConnectionWith");
           display:block;
           padding-left:20px;
    }
    
    body listOrg org link[type="places"] {
        content: "Linked to (place): "
         oxy_editor(type, text, edit, "@corresp", columns, 19)
           /*oxy_editor(type, popupSelection, edit, "@corresp", editable, false, sort, ascending,
             values, oxy_concat("#", oxy_xpath(oxy_concat('string-join(doc("', oxy_url('${framework}/', 'resources/places.xml'), '")//listPlace//place/idno, ",#")'))),
             labels, oxy_xpath(oxy_concat('normalize-space(string-join(doc("', oxy_url('${framework}/', 'resources/places.xml'), '")//listPlace//place/placeName[1], ","))' ))
             )*/
             " Link type: "
             oxy_editor(type, combo, edit, "@subtype", editable, true, columns, 16,
             values, "isPartOf, isMadeOf, isWithin, hasWithin, isInVicinityOf, hasInItsVicinity, isAdjacentTo, hasConnectionWith");
           display:block;
           padding-left:20px;
    }
      
          /* Links from people, places, juridical persons, estates to PEOPLE*/
     body listPlace place link[type="people"], body listOrg org link[type="people"] {
        content: "Linked to (person): "
         oxy_editor(type, text, edit, "@corresp", columns, 19)
           /*oxy_editor(type, popupSelection, edit, "@corresp", editable, false, sort, ascending,
             values, oxy_concat("#", oxy_xpath(oxy_concat('string-join(doc("', oxy_url('${framework}/', 'resources/people.xml'), '")//listPerson//person/idno, ",#")'))),
             labels, oxy_xpath(oxy_concat('normalize-space(string-join(doc("', oxy_url('${framework}/', 'resources/people.xml'), '")//listPerson//person/persName[1], ","))' ))
             )*/
             " Link type: "
             oxy_editor(type, combo, edit, "@subtype", editable, true, columns, 24,
             values, "legallyRecognisedUnionWith, seriousIntimateRelationshipWith, casualIntimateRelationshipWith, intimateRelationshipWith, fatherOf, fatherInLawOf, motherOf, motherInLawOf, parentOf, fosterParentOf, sonOf, sonInLawOf, daughterOf, daughterInLawOf, childOf, grandfatherOf, grandmotherOf, grandparentOf, grandsonOf, granddaughterOf, grandchildOf, greatGrandfatherOf, greatGrandmotherOf, greatGrandparentOf, greatGrandsonOf, greatGranddaughterOf, greatGrandchildOf, brotherOf, brotherInLawOf, sisterOf, sisterInLawOf, siblingOf, auntOf, uncleOf, nephewOf, nieceOf, childOfSiblingOf, cousinOf, kinOf, ancestorOf, descendentOf, familyOf, extendedFamilyOf, hereditaryFamilyOf, householdOf, extendedHouseholdOf, patronOf, clientOf, masterOf, formerMasterOf, slaveOf, houseSlaveOf, formerSlaveOf, freedSlaveOf, freedmanOf, freedwomanOf, fellowFreedmanOf, godfatherOf, godmotherOf, godsonOf, goddaughterOf, compaterOf, commaterOf, nutritusOf, nutritorOf, benefactorOf, gratitudeTo, testamentaryLinkWith, legateeOf, heirTo, mundualdusOf, friendshipFor, allianceWith, enmityFor, dominusOf, seniorOf, vassusOf, gasindiusOf, fidelisOf, milesOf, homoOf, agentFor, professionalRelationship, link");
/*values, oxy_concat("", oxy_xpath(oxy_concat('string-join(doc("', oxy_url('${framework}/', 'resources/thesaurus.xml'), '")//taxonomy[@xml:id="thesaurus"]//category[@n="bonds"]//category/catDesc/@n, ",")'))));*/
           display:block;
           padding-left:20px;
    }
    
    body listPerson person link[type="people"] {
        content: "Linked to (person): "
         oxy_editor(type, text, edit, "@corresp", columns, 19)
           /*oxy_editor(type, popupSelection, edit, "@corresp", editable, false, sort, ascending,
             values, oxy_concat("#", oxy_xpath(oxy_concat('string-join(//listPerson//person/idno, ",#")'))),
             labels, oxy_xpath(oxy_concat('normalize-space(string-join(//listPerson//person/persName[1], ","))' ))
             )*/
             " Link type: "
             oxy_editor(type, combo, edit, "@subtype", editable, true, columns, 24,
             values, "legallyRecognisedUnionWith, seriousIntimateRelationshipWith, casualIntimateRelationshipWith, intimateRelationshipWith, fatherOf, fatherInLawOf, motherOf, motherInLawOf, parentOf, fosterParentOf, sonOf, sonInLawOf, daughterOf, daughterInLawOf, childOf, grandfatherOf, grandmotherOf, grandparentOf, grandsonOf, granddaughterOf, grandchildOf, greatGrandfatherOf, greatGrandmotherOf, greatGrandparentOf, greatGrandsonOf, greatGranddaughterOf, greatGrandchildOf, brotherOf, brotherInLawOf, sisterOf, sisterInLawOf, siblingOf, auntOf, uncleOf, nephewOf, nieceOf, childOfSiblingOf, cousinOf, kinOf, ancestorOf, descendentOf, familyOf, extendedFamilyOf, hereditaryFamilyOf, householdOf, extendedHouseholdOf, patronOf, clientOf, masterOf, formerMasterOf, slaveOf, houseSlaveOf, formerSlaveOf, freedSlaveOf, freedmanOf, freedwomanOf, fellowFreedmanOf, godfatherOf, godmotherOf, godsonOf, goddaughterOf, compaterOf, commaterOf, nutritusOf, nutritorOf, benefactorOf, gratitudeTo, testamentaryLinkWith, legateeOf, heirTo, mundualdusOf, friendshipFor, allianceWith, enmityFor, dominusOf, seniorOf, vassusOf, gasindiusOf, fidelisOf, milesOf, homoOf, agentFor, professionalRelationship, link");
             /*values, oxy_concat("", oxy_xpath(oxy_concat('string-join(doc("', oxy_url('${framework}/', 'resources/thesaurus.xml'), '")//taxonomy[@xml:id="thesaurus"]//category[@n="bonds"]//category/catDesc/@n, ",")'))));*/
           display:block;
           padding-left:20px;
    }
    
        /* Links from people, places, juridical persons, estates to JURIDICAL PERSONS*/
    body listPlace place link[type="juridical_persons"], body listPerson person link[type="juridical_persons"] {
        content: "Linked to (juridical person): "
         oxy_editor(type, text, edit, "@corresp", columns, 19)
           /*oxy_editor(type, popupSelection, edit, "@corresp", editable, false, sort, ascending,
             values, oxy_concat("#", oxy_xpath(oxy_concat('string-join(doc("', oxy_url('${framework}/', 'resources/juridical_persons.xml'), '")//listOrg//org/idno, ",#")'))),
             labels, oxy_xpath(oxy_concat('normalize-space(string-join(doc("', oxy_url('${framework}/', 'resources/juridical_persons.xml'), '")//listOrg//org/orgName[1], ","))' ))
             )*/
             " Link type: "
             oxy_editor(type, combo, edit, "@subtype", editable, true, columns, 24,
             values, "legallyRecognisedUnionWith, seriousIntimateRelationshipWith, casualIntimateRelationshipWith, intimateRelationshipWith, fatherOf, fatherInLawOf, motherOf, motherInLawOf, parentOf, fosterParentOf, sonOf, sonInLawOf, daughterOf, daughterInLawOf, childOf, grandfatherOf, grandmotherOf, grandparentOf, grandsonOf, granddaughterOf, grandchildOf, greatGrandfatherOf, greatGrandmotherOf, greatGrandparentOf, greatGrandsonOf, greatGranddaughterOf, greatGrandchildOf, brotherOf, brotherInLawOf, sisterOf, sisterInLawOf, siblingOf, auntOf, uncleOf, nephewOf, nieceOf, childOfSiblingOf, cousinOf, kinOf, ancestorOf, descendentOf, familyOf, extendedFamilyOf, hereditaryFamilyOf, householdOf, extendedHouseholdOf, patronOf, clientOf, masterOf, formerMasterOf, slaveOf, houseSlaveOf, formerSlaveOf, freedSlaveOf, freedmanOf, freedwomanOf, fellowFreedmanOf, godfatherOf, godmotherOf, godsonOf, goddaughterOf, compaterOf, commaterOf, nutritusOf, nutritorOf, benefactorOf, gratitudeTo, testamentaryLinkWith, legateeOf, heirTo, mundualdusOf, friendshipFor, allianceWith, enmityFor, dominusOf, seniorOf, vassusOf, gasindiusOf, fidelisOf, milesOf, homoOf, agentFor, professionalRelationship, link");
             /*values, oxy_concat("", oxy_xpath(oxy_concat('string-join(doc("', oxy_url('${framework}/', 'resources/thesaurus.xml'), '")//taxonomy[@xml:id="thesaurus"]//category[@n="bonds"]//category/catDesc/@n, ",")'))));*/
           display:block;
           padding-left:20px;
    }
    
    body listOrg org link[type="juridical_persons"] {
        content: "Linked to (juridical person): "
         oxy_editor(type, text, edit, "@corresp", columns, 19)
           /*oxy_editor(type, popupSelection, edit, "@corresp", editable, false, sort, ascending,
             values, oxy_concat("#", oxy_xpath(oxy_concat('string-join(//listOrg//org/idno, ",#")'))),
             labels, oxy_xpath(oxy_concat('normalize-space(string-join(//listOrg//org/orgName[1], ","))' ))
             )*/
             " Link type: "
             oxy_editor(type, combo, edit, "@subtype", editable, true, columns, 24,
             values, "legallyRecognisedUnionWith, seriousIntimateRelationshipWith, casualIntimateRelationshipWith, intimateRelationshipWith, fatherOf, fatherInLawOf, motherOf, motherInLawOf, parentOf, fosterParentOf, sonOf, sonInLawOf, daughterOf, daughterInLawOf, childOf, grandfatherOf, grandmotherOf, grandparentOf, grandsonOf, granddaughterOf, grandchildOf, greatGrandfatherOf, greatGrandmotherOf, greatGrandparentOf, greatGrandsonOf, greatGranddaughterOf, greatGrandchildOf, brotherOf, brotherInLawOf, sisterOf, sisterInLawOf, siblingOf, auntOf, uncleOf, nephewOf, nieceOf, childOfSiblingOf, cousinOf, kinOf, ancestorOf, descendentOf, familyOf, extendedFamilyOf, hereditaryFamilyOf, householdOf, extendedHouseholdOf, patronOf, clientOf, masterOf, formerMasterOf, slaveOf, houseSlaveOf, formerSlaveOf, freedSlaveOf, freedmanOf, freedwomanOf, fellowFreedmanOf, godfatherOf, godmotherOf, godsonOf, goddaughterOf, compaterOf, commaterOf, nutritusOf, nutritorOf, benefactorOf, gratitudeTo, testamentaryLinkWith, legateeOf, heirTo, mundualdusOf, friendshipFor, allianceWith, enmityFor, dominusOf, seniorOf, vassusOf, gasindiusOf, fidelisOf, milesOf, homoOf, agentFor, professionalRelationship, link");
             /*values, oxy_concat("", oxy_xpath(oxy_concat('string-join(doc("', oxy_url('${framework}/', 'resources/thesaurus.xml'), '")//taxonomy[@xml:id="thesaurus"]//category[@n="bonds"]//category/catDesc/@n, ",")'))));*/
           display:block;
           padding-left:20px;
    }
    
        /* Links from people, places, juridical persons, estates to ESTATES*/
    body listPlace[type="places"] place link[type="estates"], body listOrg org link[type="estates"], body listPerson person link[type="estates"] {
        content: "Linked to (estate): "
         oxy_editor(type, text, edit, "@corresp", columns, 19)
           /*oxy_editor(type, popupSelection, edit, "@corresp", editable, false, sort, ascending,
             values, oxy_concat("#", oxy_xpath(oxy_concat('string-join(doc("', oxy_url('${framework}/', 'resources/estates.xml'), '")//listPlace//place/idno, ",#")'))),
             labels, oxy_xpath(oxy_concat('normalize-space(string-join(doc("', oxy_url('${framework}/', 'resources/estates.xml'), '")//listPlace//place/geogName[1], ","))' ))
             )*/
             " Link type: "
             oxy_editor(type, combo, edit, "@subtype", editable, true, columns, 16,
             values, "isPartOf, isMadeOf, isWithin, hasWithin, isInVicinityOf, hasInItsVicinity, isAdjacentTo, hasConnectionWith");
           display:block;
           padding-left:20px;
    }
    
    body listPlace[type="estates"] place link[type="estates"] {
        content: "Linked to (estate): "
         oxy_editor(type, text, edit, "@corresp" columns, 19)
           /*oxy_editor(type, popupSelection, edit, "@corresp", editable, false, sort, ascending,
             values, oxy_concat("#", oxy_xpath(oxy_concat('string-join(//place/idno, ",#")'))),
             labels, oxy_xpath(oxy_concat('normalize-space(string-join(//place/geogName[1], ","))' ))
             )*/
             " Link type: "
             oxy_editor(type, combo, edit, "@subtype", editable, true, columns, 16,
             values, "isPartOf, isMadeOf, isWithin, hasWithin, isInVicinityOf, hasInItsVicinity, isAdjacentTo, hasConnectionWith");
           display:block;
           padding-left:20px;
    }
    
    body listPlace place:after, body listOrg org:after, body listPerson person:after {
        content: 
              oxy_editor(type, button, actionID, "add_place_link")
              oxy_editor(type, button, actionID, "add_person_link")
              oxy_editor(type, button, actionID, "add_juridical_person_link")
              oxy_editor(type, button, actionID, "add_estate_link")
            oxy_editor(type, button, actionID, "delete_item");
           display:block;
           padding-left:20px;
    }
    
    encodingDesc category catDesc {
           display:block;
    }
    
        encodingDesc category:before {
        content: "Category" oxy_editor( type, text, edit, "@n", columns, 30);
        font-weight:bold;
        display:block;
        visibility: -oxy-collapse-text ;
    }
    
/*End Authority Lists*/
    
    
    
    
/*Markup inside the text*/

ab rs:before {
        content:  "KEY: " 
        oxy_editor(type, popupSelection, edit, "@key", editable, false,
             values, oxy_concat("#", oxy_xpath(oxy_concat('string-join(doc("', oxy_url('${framework}/', 'resources/thesaurus.xml'), '")//taxonomy[@xml:id="thesaurus"]//category/catDesc/@n, ",#")'))),
             labels, oxy_xpath(oxy_concat('string-join(doc("', oxy_url('${framework}/', 'resources/thesaurus.xml'), '")//taxonomy[@xml:id="thesaurus"]//category/catDesc, ",")' ))
             );
        display:inline;
    }
    
ab rs {
    border-style:dashed;
    border-color:black;
    border-width: thin;
}

ab placeName { background-color: #e6e6ff; }
ab persName { background-color: #ffffcc; }
ab orgName { background-color: #ffe6e6; }
ab geogName { background-color: #ccffcc; }
ab date { background-color: #ffccff; }
    
ab placeName:before {
        content:  "KEY: " 
        oxy_editor(type, popupSelection, edit, "@key", editable, false,
             values, oxy_concat("#", oxy_xpath(oxy_concat('string-join(doc("', oxy_url('${framework}/', 'resources/thesaurus.xml'), '")//taxonomy[@xml:id="thesaurus"]//category/catDesc/@n, ",#")'))),
             labels, oxy_xpath(oxy_concat('string-join(doc("', oxy_url('${framework}/', 'resources/thesaurus.xml'), '")//taxonomy[@xml:id="thesaurus"]//category/catDesc, ",")' ))
             )
             " REF: " 
        oxy_editor(type, popupSelection, edit, "@ref", editable, false, sort, ascending,
             values, oxy_concat("#", oxy_xpath(oxy_concat('string-join(doc("', oxy_url('${framework}/', 'resources/places.xml'), '")//listPlace//place/idno, ",#")'))),
             labels, oxy_xpath(oxy_concat('normalize-space(string-join(doc("', oxy_url('${framework}/', 'resources/places.xml'), '")//listPlace//place/placeName[1], ","))' ))
             );
        display:inline;
    }
    
    ab persName:before {
        content:  "KEY: " 
        oxy_editor(type, popupSelection, edit, "@key", editable, false,
             values, oxy_concat("#", oxy_xpath(oxy_concat('string-join(doc("', oxy_url('${framework}/', 'resources/thesaurus.xml'), '")//taxonomy[@xml:id="thesaurus"]//category/catDesc/@n, ",#")'))),
             labels, oxy_xpath(oxy_concat('string-join(doc("', oxy_url('${framework}/', 'resources/thesaurus.xml'), '")//taxonomy[@xml:id="thesaurus"]//category/catDesc, ",")' ))
             )
             " REF: " 
        oxy_editor(type, popupSelection, edit, "@ref", editable, false, sort, ascending,
             values, oxy_concat("#", oxy_xpath(oxy_concat('string-join(doc("', oxy_url('${framework}/', 'resources/people.xml'), '")//listPerson//person/idno, ",#")'))),
             labels, oxy_xpath(oxy_concat('normalize-space(string-join(doc("', oxy_url('${framework}/', 'resources/people.xml'), '")//listPerson//person/persName[1], ","))' ))
             );
        display:inline;
    }
    
    ab name:before {
        content:  "REF: " 
         oxy_editor(type, text, edit, "@ref", columns, 12);
        display:inline;
    }
  
    ab geogName:before {
        content:  "KEY: " 
        oxy_editor(type, popupSelection, edit, "@key", editable, false,
             values, oxy_concat("#", oxy_xpath(oxy_concat('string-join(doc("', oxy_url('${framework}/', 'resources/thesaurus.xml'), '")//taxonomy[@xml:id="thesaurus"]//category/catDesc/@n, ",#")'))),
             labels, oxy_xpath(oxy_concat('string-join(doc("', oxy_url('${framework}/', 'resources/thesaurus.xml'), '")//taxonomy[@xml:id="thesaurus"]//category/catDesc, ",")' ))
             )
             " REF: " 
        oxy_editor(type, popupSelection, edit, "@ref", editable, false, sort, ascending,
             values, oxy_concat("#", oxy_xpath(oxy_concat('string-join(doc("', oxy_url('${framework}/', 'resources/estates.xml'), '")//listPlace//place/idno, ",#")'))),
             labels, oxy_xpath(oxy_concat('normalize-space(string-join(doc("', oxy_url('${framework}/', 'resources/estates.xml'), '")//listPlace//place/geogName[1], ","))' ))
             );
        display:inline;
    }  
    
    ab orgName:before {
        content:  "KEY: " 
        oxy_editor(type, popupSelection, edit, "@key", editable, false,
             values, oxy_concat("#", oxy_xpath(oxy_concat('string-join(doc("', oxy_url('${framework}/', 'resources/thesaurus.xml'), '")//taxonomy[@xml:id="thesaurus"]//category/catDesc/@n, ",#")'))),
             labels, oxy_xpath(oxy_concat('string-join(doc("', oxy_url('${framework}/', 'resources/thesaurus.xml'), '")//taxonomy[@xml:id="thesaurus"]//category/catDesc, ",")' ))
             )
             " REF: " 
        oxy_editor(type, popupSelection, edit, "@ref", editable, false, sort, ascending,
             values, oxy_concat("#", oxy_xpath(oxy_concat('string-join(doc("', oxy_url('${framework}/', 'resources/juridical_persons.xml'), '")//listOrg//org/idno, ",#")'))),
             labels, oxy_xpath(oxy_concat('normalize-space(string-join(doc("', oxy_url('${framework}/', 'resources/juridical_persons.xml'), '")//listOrg//org/orgName[1], ","))' ))
             );
        display:inline;
    }  
    
/*End of markup inside the text*/      




   TEI {
    display:block;
    margin:2em;
    line-height:175%;
    width: 75%;
    margin-left: 50px;
    border:1px solid rgb(153, 153, 143);
    background-color:rgb(245, 243, 221);
    margin:10px 20px 15px 20px;
   }
    
    foreign, div title, history title, note title, body listPlace title, body listPerson title, body listOrg title {
        display:inline;
        font-style: italic;
    }

    msContents, dimensions, listBibl,  div[type="commentary"], div[type="edition"], div[type="translation"], lb   { display:block; }
    
    titleStmt:before {
        content: "Document title: ";
        visibility: -oxy-collapse-text ;
        display:block; 
        margin:10px 20px 0px 20px;
    }
    
    
     publicationStmt:before {
        visibility: -oxy-collapse-text;
    }

    publicationStmt idno:before { 
       content: "Document number: "
        oxy_editor(type, text, edit, "#text", columns, 30);
        display:block;
        margin:10px 20px 0px 20px;
    }

    region, institution, settlement, repository, idno {
        visibility: -oxy-collapse-text;
    }      

       listChange:after {
       display:block;
       content: oxy_editor(type, button, actionID, "add_change");
      }
      
      change {
          content: "When:" oxy_editor(type, datePicker, columns, 13, edit, "@when", format, "yyyy-MM-dd")
        "  Who:" oxy_editor(type, combo, edit, "@who" editable, true, columns, 22,
             values, "gpviscardi, kbielawski, other")
          "  Type of change:"
          oxy_editor(type, combo, edit, "#text", editable, true, columns, 24, values, "creation of record, changes, minor changes, major changes");
          margin:10px 20px 15px 20px;
          visibility: -oxy-collapse-text ;
          display:block;
      }  
      
    titleStmt > title { -oxy-placeholder-content: 'Title here'; }
    note[type="displayed_date"] { -oxy-placeholder-content: 'Date (to be displayed) here'; }
    note[type="dating_elements"] { -oxy-placeholder-content: 'Dating elements here'; }
    note[type="topical_date"] { -oxy-placeholder-content: 'Topical date here'; }   
    note[type="redaction_date"] { -oxy-placeholder-content: 'Date/period of redaction'; }   
    origPlace { -oxy-placeholder-content: 'Provenance here'; }
    
    origDate:before { content: " Date"; }
    listChange:before { content: " Changes"; }
    div[type="edition"]:before { content: " Text"; }
    div[type="bibliography"]:before { content: " Bibliography"; }
    div[type="commentary"]:before { content: " Commentary"; }
    div[type="translation"]:before { content: " Translation"; }
    div[type="apparatus"]:before { content: " Apparatus"; }
   
    origDate:before, listChange:before, div[type="edition"]:before, div[type="bibliography"]:before, div[type="commentary"]:before, div[type="translation"]:before, div[type="apparatus"]:before {
        font-weight:bold;
        font-size: 20px;
        display:block;
   }
   
   titleStmt > title, note[type="displayed_date"], note[type="dating_elements"], note[type="topical_date"], note[type="redaction_date"] {
        margin:15px;
        padding: 0 10px 0 10px;
        background-color: #fdfdfd;
        display:block;
    }
    
    summary, listChange, div[type="edition"], div[type="bibliography"], div[type="commentary"], div[type="translation"], div[type="apparatus"] {
        border:1px solid rgb(153, 153, 143);
        margin:10px 20px 40px 20px;
        display:block;
   }
   
    div[type="edition"] ab, div[type="bibliography"] p, div[type="commentary"] p, div[type="translation"] p, div[type="apparatus"] p {
        background-color: #fdfdfd;
        margin:15px;
        padding: 5px 10px 5px 10px;
        display:block;
        -oxy-placeholder-content: 'Text here';
    }
    
 lb {
 content: " \A ";
  visibility: -oxy-collapse-text ;
 }